name: deploy

on:
  workflow_call:
    inputs:
      event_name:
        description: The original github.event_name object in the caller workflow
        required: true
        type: string
      installer_platforms:
        description: Comma-separated string of conda-style platforms for which it builds the installers.
        required: false
        type: string
        default: linux-64,win-64,osx-arm64
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare-matrix:
    # See this SO answer for details on conditional matrices
    # https://stackoverflow.com/a/65434401/3407590
    name: Prepare matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Prepare matrix
        id: set-matrix
        shell: python
        # The Python versions chosen below will determine which
        # Python versions the installers will bundle. The general
        # principle is to follow the SPEC-0 recommendation:
        # https://scientific-python.org/specs/spec-0000/
        run: |
          import os
          import json
          elements = [
            {
              "os": "ubuntu-latest",
              "target-platform": "linux-64",
            },
            {
              "os": "macos-14",
              "target-platform": "osx-arm64",
            },
            {
              "os": "windows-latest",
              "target-platform": "win-64",
            },
          ]
          platforms_str = "${{ inputs.installer_platforms || 'linux-64,win-64,osx-arm64' }}"
          platforms = {p.strip() for p in platforms_str.split(",")}
          matrix = {"include": []}
          for element in elements:
            if element["target-platform"] in platforms:
              matrix["include"].append(element)
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
            f.write(f"matrix={json.dumps(matrix)}\n")

  installers:
    name: Create ${{ matrix.target-platform }} installer
    runs-on: ${{ matrix.os }}
    needs: prepare-matrix
    if: startsWith(github.ref, 'refs/tags/') # Only run for tags
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          repository: funkelab/motile_tracker_bundled_app
          path: motile-tracker-installer

      - name: Install pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          pixi-version: v0.43.2
          cache: false
          run-install: false
          manifest-path: motile-tracker-installer/pixi.toml

      - name: Install build tools (Windows only)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $installer = "vs_BuildTools.exe"

          Invoke-WebRequest -Uri "https://aka.ms/vs/17/release/vs_BuildTools.exe" -OutFile $installer

          Start-Process -Wait -FilePath .\$installer -ArgumentList `
            "--quiet", `
            "--wait", `
            "--norestart", `
            "--nocache", `
            "--add Microsoft.VisualStudio.Workload.VCTools", `
            "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64", `
            "--add Microsoft.VisualStudio.Component.Windows10SDK.19041", `
            "--includeRecommended"

      - name: Download installer app (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y makeself
          echo "extension=run" >> $GITHUB_ENV

      - name: Download installer app (macOS only)
        if: runner.os == 'macOS'
        run: |
          brew install create-dmg
          echo "extension=dmg" >> $GITHUB_ENV

      - name: Download installer app (Windows only)
        if: runner.os == 'Windows'
        shell: bash -el {0}
        run: |
          choco install -y innosetup
          echo "extension=exe" >> $GITHUB_ENV

      - name: Prepare action env variables
        shell: bash -el {0}
        working-directory: motile-tracker-installer
        run: |
          pixi run setup

          MOTILE_TRACKER_VER=$(pixi run python src/motile_launcher/launcher.py --version)
          echo "Motile Tracker version: ${MOTILE_TRACKER_VER}"
          echo "version=${MOTILE_TRACKER_VER}" >> $GITHUB_ENV

          ARCH_SUFFIX=$(pixi run python src/motile_launcher/launcher.py --arch)
          echo "arch-suffix=${ARCH_SUFFIX}" >> $GITHUB_ENV

      - name: Package native app
        working-directory: motile-tracker-installer
        run: |
          pixi run create-installer
          mv dist/MotileTrackerInstaller.${{ env.extension }} dist/MotileTrackerInstaller-${{ env.version }}-${{ runner.os }}-${{ env.arch-suffix }}.${{ env.extension }}

      - name: Get Release
        if: inputs.event_name == 'release' && startsWith(github.ref, 'refs/tags/v')
        id: get_release
        uses: bruceadams/get-release@v1.3.2

      - name: Upload Release Asset
        if: inputs.event_name == 'release' && startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: dist/motile-tracker-installer/dist/MotileTrackerInstaller-${{ env.version }}-${{ runner.os }}-${{ env.arch-suffix }}.${{ env.extension }}
          repository: funkelab/motile_tracker
